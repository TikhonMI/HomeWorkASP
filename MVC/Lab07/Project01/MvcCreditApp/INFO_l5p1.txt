Lab5 Разработка модели

В этой работе вы создадите приложение, работающее с базой данных с применением Entity Framework, но без создания шаблонных элементов (их вы будете реализовывать в следующей работе).
-Lab5.1 Создание приложения с реализацией хранения данных-
В этом упражнении вы разработаете новое приложение, которое будет выводить
на главной странице из базы данных информацию о кредитах, также будет
реализована возможность пользователю подать заявку на получение кредита, и эта
заявка сохранится в базе данных.

---Lab5.1(1) Создание проекта---
1. Создайте новый проект ASP.NET Web Application с именем MvcCreditApp.
2. В окне выбора шаблона в разделе Шаблоны укажите Веб-приложение ASP.NET Core (MVC)
3. Укажите имя проекта MvcCreditApp и расположение.
4. В окне Дополнительные сведения в списке Тип проверки подлинности выберите Индивидуальные учетные записи (они потребуются в работе 8).
5. Поскольку при создании проекта была выбрана поддержка проверки подлинности, проверьте, что в папке Models(Data) есть класс ApplicationDbContext, а в файле Program.cs с помощью инверсии зависимостей добавлен AddDbContext<ApplicationDbContext>. Наличие данного контекста нужно будет учесть при создании своего.
6. Запустите проект и протестируйте работу готового шаблона сайта.

---Lab5.1(2) Реализация модели---
Данные, с которыми будет работать клиент, должны быть представлены моделями. Для данной задачи можно выделить две области данных: информация о кредите и информация о заявке на кредит, соответственно, необходимо создать две модели.
1. Добавьте в папку Models класс Credit, который будет реализовывать модель данных о кредите.
2. Добавьте в него код, описывающий модель кредита.
3. Добавьте в папку Models класс Bid, который будет реализовывать модель данных о заявке на кредит.
4. Добавьте в него код, описывающий модель заявки на кредит.
Компилятор создает предупреждения о том, как обрабатываются значения null. Подсистема формирования шаблонов не поддерживает ссылочные типы, допускающие значения NULL, поэтому модели, используемые в формировании шаблонов, также не поддерживают их, чтобы исключить предупреждения из ссылочных типов, допускающих значения NULL, удалите следующую строку из файла проекта MvcCreditApp.csproj: <Nullable>enable</Nullable>

---Lab5.1 Применение Entity Framework---
Для доступа к данным будем использовать Entity Framework (позволяет абстрагироваться от структуры конкретной базы данных и вести все операции с данными через модель.).
Entity Framework в сочетании с LINQ (Language-Integrated Query) представляет собой реализацию ORM (объектно-реляционное отображение (object-relational mapping — ORM) для платформы .NET Framework от компании Microsoft. Entity Framework содержит механизмы создания и работы с сущностями базы данных через объектно-ориентированный код на языке C#.
В этом упражнении рассматривается подход Code-First, при использовании которого сначала определяется модель в коде, а затем, на ее основе создается база данных. Вы создадите две таблицы, описывающие данные клиента и его кредит Отношение между этими таблицами будет “один к одному” (one-to- one).
Entity Framework при работе с Code First требует определения ключа элемента для создания первичного ключа в таблице в БД. По умолчанию при генерации БД EF в качестве первичных ключей будет рассматривать свойства с именами Id или [Имя_класса]Id (т. е. CreditId и BidId).
Поскольку проект создан по шаблону MVC, то библиотека Entity Framework уже добавлена в проект.

---Lab5.1(3) Создание контекста данных---
1. Создайте контекст данных (он нужен для облегчения доступа к БД на основе модели), для этого добавьте в папку Models класс CreditContext, унаследованный от класса DbContext.
2. Добавьте требуемые ссылки на пространство имен и в классе CreditContext объявите соответствующие таблицы (по традиции во множественном числе) базы данных с помощью свойств с типом DbSet.
Этот класс контекста представляет полный слой данных, который можно использовать в приложениях. Благодаря DbContext, можно запросить, изменить, удалить или вставить значения в базу данных.
3. Постройте приложение.
4. Зарегистрируйте контекст базы данных с помощью контейнера внедрения зависимостей в файле Program.cs (по аналогии с ApplicationDbContext):
5. Система конфигурации ASP.NET Core считывает ключ ConnectionString, в данном случае (для разработки на локальном уровне) конфигурация получает строку подключения из файла appsettings.json, добавьте ее по аналогии со строкой для "DefaultConnection".
---Lab5.1(3) Первоначальная миграция---
EF Core использует функцию миграции для создания базы данных, миграции — это набор средств, с помощью которых можно создавать и обновлять базы данных в соответствии с моделью данных.
6. В меню Средства последовательно выберите пункты Диспетчер пакетов NuGet → Консоль диспетчера пакетов.
7. Введите в консоли диспетчера пакетов (PMC) команду для добавления миграции (обратите внимание на необходимость явно указать имя класса контекста, так в данном проекте их два):
PM> Add-Migration InitialCreate -Context 'CreditContext'
8. Выполните обновление базы данных:
PM> Update-Database -Context 'CreditContext'
В случае успешного выполнения команды должно быть соответствующее сообщение и скрипты для создания базы данных и таблиц.
9. Для просмотра созданной базы данных откройте с помощью меню Вид обозреватель объектов SQL Server (SSOX).
10.Для локального сервера в контекстном меню выберите команду Обновить.
11.Раскройте базу данных CreditContext и для таблицы dbo.Credits выберите в контекстном меню Показать конструктор:
---Lab5.1(3) Инициализация базы данных с тестовыми данными---
EF создает пустую базу данных. В этой части вы добавите метод, который вызывается после создания базы данных и заполняет ее тестовыми данными.
12.В папке Models создайте класс SeedData со следующим кодом. 
Обратите внимание на то, что если в базе данных уже есть кредиты, то возвращается инициализатор заполнения и кредиты не добавляются.
13.Данными БД заполняется при запуске приложения, поэтому в файл Program.cs добавьте следующий код.
При запуске приложения в этой части Program.cs выполняются следующие действия:
• получение экземпляра контекста базы данных из контейнера внедрения зависимостей;
• вызывается метод инициализации;
• по завершению работы метода Initialize контекст удаляется.

---Lab5.1(3) Тестирование приложения---
14.Постройте и запустите приложение.
15.Проверьте с помощью обозревателя серверов, что данные действительно заполнились в требуемую таблицу
16.Установите точку останова в if (context.Credits.Any()) и снова запустите приложение, так как данные есть, то проверьте, что на следующем шаге заполнение данными игнорируется.
17.С помощью обозревателя серверов удалите все записи в базе данных и снова запустите приложение с той же точкой останова. Выполняя пошагово код проверьте заполнение таблицы новыми данными.
