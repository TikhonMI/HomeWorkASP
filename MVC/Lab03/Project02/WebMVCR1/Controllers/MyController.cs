using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using System;
using WebMVCR1.Models; //Lab3.2(6)Обработка данных на форме.1 добавили пространство имен


/*
Lab1.1.1-1.5
Контроллер используется для определения и группировки набора действий,
действие реализуется как метод контроллера, обрабатывающий запросы, то есть
метод контроллера можно вызвать из Интернет через некоторый URL для
выполнения действия. Запросы сопоставляются с действиями посредством
маршрутизации.
*/

namespace WebMVCR1.Controllers
{
    public class MyController : Controller //Lab1.2 Переименовали HomeController в MyController, в Program переименовали Home в My
                                           // -- Lab3.2(3)Настройка контроллера.3 Переименовали MyController в HomeController, в Program переименовали My в Home 
    {
        /* убрали в Lab1.1.6
        public IActionResult Index() //метод действия Index().
        {
            return View();
        }
        */

        /* убрали в Lab1.2.1
        // Lab1.1.6 Для тестирование контроллера добавили метод который возвращает строку приветствия в зависимости от времени дня:
        public string Index()
        {
            int hour = DateTime.Now.Hour;
            string Greeting = hour < 12 ? "Доброе утро" : "Добрый день";
            return Greeting;
        }
        */

        /* убрали в Lab1.3.3
        // Lab1.2.2-2.4 Изменили метод Index()
        // Стандартный get-запрос принимает примерно следующую форму: /метод? параметр1 = значение1 & параметр2 = значение2
        // Для проверки работы метода действия, принимающий параметр измените URL на следующий адрес: localhost:port/My/Index?hel=Иван
        public string Index(string hel) //добавивили передаваемый ему строковый параметр (hel)
        {
            int hour = DateTime.Now.Hour;
            //в теле метода присвоили строковой переменной сообщение с передаваемым параметром(hel)
            string Greeting = hour < 12 ? "Доброе утро" : "Добрый день" + ", " + hel; 
            return Greeting;
        }
        */

        /* убрали в Lab3.1(1)Настройка контроллера.1
        public string Index(string hel)
        {
            string Greeting = ModelClass.ModelHello() + ", " + hel; // Lab1.3.3 Вызываем метод ModelHello из класса ModelClass
            return Greeting;
        }
        */


        //Контроллер создает данные и передает представлению, отвечающему за представление их в виде html
        //Способы передачи данных:
        //      ViewBag - является членом базового класса Controller. Динамический объект, можно присвоить произвольные свойства, значения доступны для любого представления, которое будет дальше их использовать.
        //      ViewData - экземпляр класса ViewDataDictionary. Для передачи данных в представление нужно сначала добавить его в свойство контроллера ViewData в методе действия, который используется для отображения представления.
        // Lab3.1(1)Настройка контроллера.1-3.1(1).2 добавили и изменили тип возвращаемого параметра метода Index() с IActionResult на ViewResult:
        public ViewResult Index() 
        {
            int hour = DateTime.Now.Hour;
            ViewBag.Greeting = hour < 12 ? "Доброе утро" : "Добрый день"; //Lab3.1(1)Настройка контроллера.3 Присвоили свойству ViewBag
            ViewData["Mes"] = "хорошего настроения"; //Lab3.1(1)Настройка контроллера.3 Присвоили свойству ViewData произвольное значение:
            return View();
            //Lab3.1(2)Создание представления.1 Добавляем представления для метода действия Index. П.к.м. на Index() (в коде), Добавить представление
            //Lab3.1(2)Создание представления.2 Представление Razor – пустое и далее – Добавить
            //Lab3.1(2)Создание представления.3 имя – Index
            //Lab3.1(2)Создание представления.4 в структуре проекта автоматически появилась новая папка Views с вложенной папкой Home и файлом Index.cshtml.
        }

        [HttpGet] //Lab3.2(6)Обработка данных на форме.2 атрибут HttpGet для существующего метода действия InputData, данный метод должен использоваться только для GET запросов
        // Lab3.2(3)Настройка контроллера.3 Добавили метод действия InputData, которому будет соответствовать адрес формы
        public ViewResult InputData()
        {
            return View();
            //Lab3.2(4)Добавление строго типизированного представления.1 Добавляем представления для метода действия InputData. П.к.м. на InputData() (в коде), Добавить представление
            //Lab3.2(4)Добавление строго типизированного представления.2 Представление Razor и далее – Добавить
            //Lab3.2(4)Добавление строго типизированного представления.3 имя – InputData, в списке Шаблон – Create, в списке Класс - Person (WebMVCR1.Models), в разделе Параметры снимите все флажки
        }

        //Lab3.2(6)Обработка данных на форме.3 Добавьте перегруженную версию метода действия InputData, принимает параметр Person и атрибут HttpPost, новый метод будет иметь дело с POST запросами
        [HttpPost]
        public ViewResult InputData(Person p)
        {
            return View("Hello", p); //вызов метода View говорит MVC найти и обработать представление, которое называется Hello и передать представлению объект p.
                                     //Lab3.2(6)Обработка данных на форме.4 Добавляем пустое представления:
                                     //a. щелкните п.к.м. внутри одного из методов, Добавить представление
                                     //b. Выберите именно пустое представление
                                     //c. Имя представления – Hello
        }
    }
}
