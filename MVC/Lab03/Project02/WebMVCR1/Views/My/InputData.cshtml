@model WebMVCR1.Models.Person 
<!--
    Lab3.2(4)Добавление строго типизированного представления.4
Razor-оператор САБАКАmodel определяет тип модели, с которым связано представление.
Далее представлена разметка страницы и реализация тела на основе tag-
хелперов. Вспомогательные функции тегов позволяют серверному коду
участвовать в создании и отображении HTML-элементов в файлах Razor –
большинство встроенных вспомогательных функций тегов работают со
стандартными HTML-элементами и предоставляют для них атрибуты на стороне
сервера, элемент <input> содержит атрибут asp-for – этот атрибут извлекает имя
свойства указанной модели в готовый для просмотра HTML-код.-->
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>InputData</title>
</head>
<body>

    <!--Lab3.2(4)Добавление строго типизированного представления.5 удаляем сгенерированный код 
<h4>Person</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="InputData">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
-->
    <!--Lab3.2(5)Создание формы для ввода данных.1 -->
    <h4>Person</h4>
    <div>
        <!--Lab3.2(5)Создание формы для ввода данных.1 с помощью запроса POST реализуем -->
        <form method="post">
            <table>
                <tr>
                    <td><p>Введите имя:</p></td>
                    <td><input type="text" name="FirstName" /> </td>
                    <!--свойства name соответствуют
                    именам свойств модели Person и при нажатии кнопки и отправки запроса
                    передаются значения этих полей-->
                </tr>
                <tr>
                    <td><p>Введите фамилию:</p></td>
                    <td><input type="text" name="LastName" /> </td>
                    <!--свойства name соответствуют
                    именам свойств модели Person и при нажатии кнопки и отправки запроса
                    передаются значения этих полей-->
                </tr>
                <tr>
                    <td>
                        <input type="submit" value="Отправить" />
                    </td>
                    <td></td>
                </tr>
            </table>
        </form>
    </div>


</body>
</html>
